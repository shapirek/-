import logging
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from fuzzywuzzy import process

from bot.common import load_users_data_async
from bot.config import (
    INPUT_CHILD_NAME,
    CHOOSE_CHILD,
    INPUT_MESSAGE_FOR_CHILD,
)
from bot.utils.keyboards.parents_menu import show_parents_menu

logger = logging.getLogger(__name__)


async def handle_parent_call(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–ü—É—Å—Ç—å —Ä–µ–±—ë–Ω–æ–∫ –º–Ω–µ –ø–æ–∑–≤–æ–Ω–∏—Ç!¬ª: 
    —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û —Ä–µ–±—ë–Ω–∫–∞.
    """
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞?")
    return INPUT_CHILD_NAME


async def handle_child_name_input(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û, –∏—â–µ—Ç —Ä–µ–±—ë–Ω–∫–∞ –≤ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö kids_data
    –∏ –ª–∏–±–æ —Å—Ä–∞–∑—É –∏–¥—ë—Ç –∫ –≤–≤–æ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–∏–±–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.
    """
    user_input = update.message.text.strip()
    parts = user_input.split()
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±—ë–Ω–∫–∞.")
        return INPUT_CHILD_NAME

    # –î–∞–Ω–Ω—ã–µ –¥–µ—Ç–µ–π –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ show_parents_menu
    kids_data = context.user_data.get('kids_data', [])
    if not kids_data:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    # –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
    lookup = [f"{kid['—Ñ–∞–º–∏–ª–∏—è']} {kid['–∏–º—è']}" for kid in kids_data]
    matches = process.extract(user_input, lookup, limit=5)
    filtered = [name for name, score in matches if score >= 70]

    if not filtered:
        await update.message.reply_text("‚ùå –†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return INPUT_CHILD_NAME

    matched = [kid for kid in kids_data if f"{kid['—Ñ–∞–º–∏–ª–∏—è']} {kid['–∏–º—è']}" in filtered]

    # –ï—Å–ª–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
    if len(matched) == 1:
        context.user_data['selected_child'] = matched[0]
        await update.message.reply_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω:\n{matched[0]['–∏–º—è']} {matched[0]['—Ñ–∞–º–∏–ª–∏—è']} ({matched[0]['–∫–æ–º–∞–Ω–¥–∞']})"
        )
        await update.message.reply_text("–ß—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        return INPUT_MESSAGE_FOR_CHILD

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    keyboard = [
        [
            InlineKeyboardButton(
                f"{kid['—Ñ–∞–º–∏–ª–∏—è']} {kid['–∏–º—è']} {kid.get('–æ—Ç—á–µ—Å—Ç–≤–æ','')} ({kid['–∫–æ–º–∞–Ω–¥–∞']})",
                callback_data=f"select_child_{i}"
            )
        ]
        for i, kid in enumerate(matched)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:",
        reply_markup=reply_markup
    )
    context.user_data['matched_children'] = matched
    return CHOOSE_CHILD


async def handle_child_choice(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_")[2])
    matched = context.user_data.get('matched_children', [])
    if idx < 0 or idx >= len(matched):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    child = matched[idx]
    context.user_data['selected_child'] = child
    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω:\n{child['–∏–º—è']} {child['—Ñ–∞–º–∏–ª–∏—è']} ({child['–∫–æ–º–∞–Ω–¥–∞']})"
    )
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–ß—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    return INPUT_MESSAGE_FOR_CHILD


async def handle_message_for_child_input(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –≤–æ–∂–∞—Ç—ã–º –∫–æ–º–∞–Ω–¥—ã —Ä–µ–±—ë–Ω–∫–∞.
    """
    message_text = update.message.text.strip()
    child = context.user_data.get('selected_child')
    if not child:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–±—ë–Ω–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return ConversationHandler.END

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (staff & others)
    users = await load_users_data_async()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–∂–∞—Ç—ã—Ö –ø–æ –∫–æ–º–∞–Ω–¥–µ —Ä–µ–±—ë–Ω–∫–∞
    team = child.get('–∫–æ–º–∞–Ω–¥–∞')
    mentors = [u for u in users if u.get('–∫–æ–º–∞–Ω–¥–∞') == team]
    if not mentors:
        await update.message.reply_text("‚ùå –ù–µ—Ç –≤–æ–∂–∞—Ç—ã—Ö –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return await show_parents_menu(update, context)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    send_text = (
        "üôè –ü–ï–†–ï–î–ê–Æ –û–¢ –†–û–î–ò–¢–ï–õ–ï–ô üôè\n\n"
        f"{child['–∏–º—è']} {child['—Ñ–∞–º–∏–ª–∏—è']}\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"{message_text}"
    )

    # –†–∞—Å—Å—ã–ª–∞–µ–º –ø–∞–∫–µ—Ç–Ω–æ
    import asyncio as _aio
    tasks = [
        context.bot.send_message(chat_id=int(m['id']), text=send_text)
        for m in mentors
    ]
    for i in range(0, len(tasks), 30):
        await _aio.gather(*tasks[i:i+30])
        if i + 30 < len(tasks):
            await _aio.sleep(1)

    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–∂–∞—Ç—ã–º –∫–æ–º–∞–Ω–¥—ã!")
    return await show_parents_menu(update, context)
