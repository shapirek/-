from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
import asyncio


async def handle_equipment_input(update: Update, context: CallbackContext) -> int:
    equipment_request = update.message.text
    context.user_data['equipment_request'] = equipment_request

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if 'users_data' not in context.bot_data:
        context.bot_data['users_data'] = await load_users_data_async()  # –í–∞—à–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

    users_data = context.bot_data['users_data']
    
    # –ü–æ–∏—Å–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender = next((u for u in users_data if str(u['–∫–æ–¥']) == context.user_data.get('code')), None)
    if not sender:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return ConversationHandler.END

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
    channel_data = await send_plea_to_channel_async(context, equipment_request, 
                                                  sender['–∏–º—è'], sender['—Ñ–∞–º–∏–ª–∏—è'], 
                                                  sender['—Å—Ç–∞—Ç—É—Å'], 'equipment_request')

    if not channel_data.get('channel_message_id') or not channel_data.get('thread_id'):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ç—Ä–µ–¥–∞.")
        return ConversationHandler.END

    thread_url = f"https://t.me/c/{CHANNEL_LINK_PART}/{channel_data['channel_message_id']}?thread={channel_data['thread_id']}"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–æ–∑–æ–Ω–¥–µ—Ä–æ–≤ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ)
    tech_zonders = [user['id'] for user in users_data if user.get('—Ç–µ—Ö–Ω–æ–∑–æ–Ω–¥–µ—Ä') == '1']

    if not tech_zonders:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Ç–µ—Ö–Ω–æ–∑–æ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
    else:
        formatted_message = (
            f"üì¢ –ó–ê–ü–†–û–° –¢–ï–•–ù–ò–ö–ò üì¢\n\n"
            f"{equipment_request}\n\n"
            f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
            f"{sender['–∏–º—è']} {sender['—Ñ–∞–º–∏–ª–∏—è']}"
        )

        keyboard = [[InlineKeyboardButton("–ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–æ–ø–ª–µ—á–æ ü¶æ", url=thread_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        send_tasks = [
            context.bot.send_message(
                chat_id=user_id,
                text=formatted_message,
                reply_markup=reply_markup
            )
            for user_id in tech_zonders
        ]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        results = await asyncio.gather(*send_tasks, return_exceptions=True)
        for user_id, result in zip(tech_zonders, results):
            if isinstance(result, Exception):
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {result}")

        await update.message.reply_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {len(tech_zonders)} —Ç–µ—Ö–Ω–æ–∑–æ–Ω–¥–µ—Ä–∞–º!")

    return await show_staff_menu(update, context)
