from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
import asyncio  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
from functools import partial  # –î–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π


async def handle_message_for_child_input(update: Update, context: CallbackContext) -> int:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –≤–æ–∂–∞—Ç—ã–º.
    """
    message_text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞
    if not (selected_child := context.user_data.get('selected_child')):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if 'staff_data' not in context.bot_data:
        try:
            context.bot_data['staff_data'] = await async_read_google_sheet(TABULA)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

    staff_data = context.bot_data['staff_data']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–±–µ–Ω–∫–∞
    if not (child_team := selected_child.get('–∫–æ–º–∞–Ω–¥–∞')):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–µ–±–µ–Ω–∫–∞.")
        return ConversationHandler.END

    # –ü–æ–∏—Å–∫ –≤–æ–∂–∞—Ç—ã—Ö –∫–æ–º–∞–Ω–¥—ã
    matched_staff = [staff for staff in staff_data if staff.get('–∫–æ–º–∞–Ω–¥–∞') == child_team]
    
    if not matched_staff:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∂–∞—Ç—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–µ–±–µ–Ω–∫–∞.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_for_staff = (
        f"üôè –†–û–î–ò–¢–ï–õ–ò –ü–ï–†–ï–î–ê–Æ–¢ üôè\n\n"
        f"{selected_child['–∏–º—è']} {selected_child['—Ñ–∞–º–∏–ª–∏—è']}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"{message_text}"
    )

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –º–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    send_tasks = [
        context.bot.send_message(
            chat_id=staff['id'],
            text=message_for_staff
        )
        for staff in matched_staff
    ]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏
    results = await asyncio.gather(*send_tasks, return_exceptions=True)
    successful_sends = sum(1 for r in results if not isinstance(r, Exception))
    
    for staff, result in zip(matched_staff, results):
        if isinstance(result, Exception):
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {staff['id']}: {result}")

    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_sends}/{len(matched_staff)} –≤–æ–∂–∞—Ç—ã–º!")
    return await show_parents_menu(update, context)
