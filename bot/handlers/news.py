from telegram import Update
from telegram.ext import CallbackContext
import logging  # –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from your_date_utils import normalize_table_date, get_current_date  # –≤–∞—à–∏ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
from your_schedule_utils import read_schedule_sheet, format_schedule_message  # –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
import asyncio  # –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏


async def handle_news(update: Update, context: CallbackContext) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        query = update.callback_query
        message = query.message if query else update.message
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if 'schedule_data' not in context.bot_data:
            context.bot_data['schedule_data'] = await async_read_schedule_sheet(SCHEDULE_SHEET_URL)
        
        schedule_data = context.bot_data['schedule_data']
        current_date = get_current_date()

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        today_schedule = next(
            (item for item in schedule_data 
             if '–¥–∞—Ç–∞' in item and normalize_table_date(item['–¥–∞—Ç–∞']) == current_date),
            None
        )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response_text = (
            format_schedule_message(today_schedule, schedule_data) 
            if today_schedule 
            else "üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!"
        )

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        if query:
            await query.answer()
            await context.bot.send_message(
                chat_id=message.chat_id,
                text=response_text,
                parse_mode='Markdown'
            )
        else:
            await message.reply_text(response_text, parse_mode='Markdown')

        logger.info(f"News processed for {current_date}")

    except Exception as e:
        logger.error(f"Error in handle_news: {str(e)}", exc_info=True)
        error_msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
            await update.callback_query.answer(error_msg, show_alert=True)
        else:
            await message.reply_text(error_msg)
