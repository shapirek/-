# bot/handlers/news.py

import logging
import asyncio

from telegram import Update
from telegram.ext import ContextTypes

from bot.services.google_sheets.read_schedule import read_schedule_sheet
from bot.services.dates import get_current_date, normalize_table_date
from bot.utils.schedule import format_schedule_message
from .env import SCHEDULE_SHEET_URL

logger = logging.getLogger(__name__)


async def handle_news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π, –±–µ—Ä—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–±—ã—Ç–∏–π.
    """
    target = update.effective_message

    try:
        # 1) –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        if 'schedule_data' not in context.bot_data:
            # read_schedule_sheet ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ background-–ø–æ—Ç–æ–∫–µ
            context.bot_data['schedule_data'] = await asyncio.to_thread(
                read_schedule_sheet, SCHEDULE_SHEET_URL
            )

        schedule_data = context.bot_data['schedule_data']

        # 2) –ü–æ–∏—Å–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –±–ª–æ–∫–∞
        today = get_current_date()
        today_schedule = next(
            (item for item in schedule_data
             if '–¥–∞—Ç–∞' in item and normalize_table_date(item['–¥–∞—Ç–∞']) == today),
            None
        )

        # 3) –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        if today_schedule:
            response_text = format_schedule_message(today_schedule, schedule_data)
        else:
            response_text = "üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç!"

        # 4) –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if update.callback_query:
            await update.callback_query.answer()
            await context.bot.send_message(
                chat_id=target.chat_id,
                text=response_text,
                parse_mode='Markdown'
            )
        else:
            await target.reply_text(response_text, parse_mode='Markdown')

        logger.info(f"handle_news: sent schedule for {today}")

    except Exception as e:
        logger.error(f"Error in handle_news: {e}", exc_info=True)
        err_text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
            # show_alert —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —á–∞—Ç
            await update.callback_query.answer(err_text, show_alert=True)
        else:
            await target.reply_text(err_text)
