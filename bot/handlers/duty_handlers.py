import logging
from typing import List, Dict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from .env import TABULA, TABULA_kids
from bot.config import (
    INPUT_STUDENT_INFO,
    CHOOSE_STUDENT,
    INPUT_DUTY_TEXT,
)
from bot.services.google_sheets.read_2 import read_google_sheet_sheet2
from bot.common import load_users_data_async
from bot.utils.keyboards.staff_menu import show_staff_menu
from fuzzywuzzy import process

logger = logging.getLogger(__name__)


async def handle_assign_duty(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–í—ã–¥–∞—Ç—å –Ω–∞—Ä—è–¥": —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û —à–∫–æ–ª—å–Ω–∏–∫–∞.
    """
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    await context.bot.send_message(
        chat_id=chat_id,
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —à–∫–æ–ª—å–Ω–∏–∫–∞:"
    )
    return INPUT_STUDENT_INFO


async def handle_student_info_input(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –§–ò–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—â–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤ Google Sheets
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ.
    """
    user_input = update.message.text.strip()

    parts = user_input.split()
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        return INPUT_STUDENT_INFO

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
    try:
        parents_data: List[Dict] = await read_google_sheet_sheet2(TABULA_kids)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —à–∫–æ–ª—å–Ω–∏–∫–æ–≤: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ "–§–∞–º–∏–ª–∏—è –ò–º—è" –¥–ª—è –ø–æ–∏—Å–∫–∞
    lookup = [f"{p['—Ñ–∞–º–∏–ª–∏—è']} {p['–∏–º—è']}" for p in parents_data]
    matches = process.extract(user_input, lookup, limit=5)
    filtered = [name for name, score in matches if score >= 70]

    if not filtered:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return INPUT_STUDENT_INFO

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–≤—à–∏—Ö
    matched = [p for p in parents_data if f"{p['—Ñ–∞–º–∏–ª–∏—è']} {p['–∏–º—è']}" in filtered]

    # –ï—Å–ª–∏ –æ–¥–∏–Ω ‚Äî —Å—Ä–∞–∑—É –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Ä—è–¥–∞
    if len(matched) == 1:
        context.user_data['selected_student'] = matched[0]
        await update.message.reply_text(
            f"‚úÖ –ù–∞—Ä—è–¥ –ø–æ–ª—É—á–∏—Ç:\n\n"
            f"{matched[0]['—Ñ–∞–º–∏–ª–∏—è']} {matched[0]['–∏–º—è']} ({matched[0]['–∫–æ–º–∞–Ω–¥–∞']})"
        )
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—Ä—è–¥–∞:")
        return INPUT_DUTY_TEXT

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    keyboard = [
        [
            InlineKeyboardButton(
                f"{p['—Ñ–∞–º–∏–ª–∏—è']} {p['–∏–º—è']} {p['–æ—Ç—á–µ—Å—Ç–≤–æ']} ({p['–∫–æ–º–∞–Ω–¥–∞']})",
                callback_data=f"select_student_{i}"
            )
        ]
        for i, p in enumerate(matched)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:",
        reply_markup=reply_markup
    )
    context.user_data['matched_students'] = matched
    return CHOOSE_STUDENT


async def handle_student_choice(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —à–∫–æ–ª—å–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –Ω–∞—Ä—è–¥–∞.
    """
    query = update.callback_query
    await query.answer()

    idx = int(query.data.split("_")[2])
    matched = context.user_data.get('matched_students', [])
    if idx < 0 or idx >= len(matched):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    student = matched[idx]
    context.user_data['selected_student'] = student

    await query.edit_message_text(
        f"‚úÖ –ù–∞—Ä—è–¥ –ø–æ–ª—É—á–∏—Ç:\n\n"
        f"{student['—Ñ–∞–º–∏–ª–∏—è']} {student['–∏–º—è']} ({student['–∫–æ–º–∞–Ω–¥–∞']})"
    )
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞—Ä—è–¥–∞
    await context.bot.send_message(
        chat_id=query.message.chat_id, 
        text="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—Ä—è–¥–∞:"
    )
    return INPUT_DUTY_TEXT

async def handle_duty_text_input(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞—Ä—è–¥–∞, –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ü–°–ò–ù –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ó–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """
    duty_text = update.message.text.strip()

    # 1) –ó–∞–≥—Ä—É–∑–∏–º –∏ –∑–∞–∫–µ—à–∏—Ä—É–µ–º users_data
    if 'users_data' not in context.bot_data:
        context.bot_data['users_data'] = await load_users_data_async()
    users = context.bot_data['users_data']

    # 2) –ù–∞–π–¥—ë–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
    sender_code = str(context.user_data.get('code', ''))
    sender = next((u for u in users if str(u.get('–∫–æ–¥')) == sender_code), None)
    if not sender:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return ConversationHandler.END

    # 3) –ü–æ–ª—É—á–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∫–æ–ª—å–Ω–∏–∫–∞
    selected = context.user_data.get('selected_student')
    if not selected:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —à–∫–æ–ª—å–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    # 4) –°–æ–±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –Ω–∞—Ä—è–¥–∞
    message_text = (
        "üö® –ù–ê–†–Ø–î üö®\n\n"
        f"–ö–û–ú–£: {selected['–∏–º—è']} {selected['—Ñ–∞–º–∏–ª–∏—è']} ({selected['–∫–æ–º–∞–Ω–¥–∞']})\n"
        f"–û–¢ –ö–û–ì–û: {sender['–∏–º—è']} {sender['—Ñ–∞–º–∏–ª–∏—è']} ({sender.get('–∫–æ–º–∞–Ω–¥–∞','')})\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"{duty_text}"
    )

    # 5) –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ü–°–ò–ù (–ø—Å–∏–Ω == '1')
    recipients = [u for u in users if u.get('–ø—Å–∏–Ω') == '1']
    if not recipients:
        await update.message.reply_text("‚ùå –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ü–°–ò–ù.")
        return ConversationHandler.END

    # 6) –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ü–°–ò–ù –ø–∞–∫–µ—Ç–Ω–æ (–ø–æ 30/—Å–µ–∫)
    import asyncio
    tasks = [
        context.bot.send_message(chat_id=int(u['id']), text=message_text)
        for u in recipients
    ]
    for i in range(0, len(tasks), 30):
        await asyncio.gather(*tasks[i:i+30])
        if i + 30 < len(tasks):
            await asyncio.sleep(1)

    # 7) –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –ü–°–ò–ù!")

    # 8) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    return await show_staff_menu(update, context)
