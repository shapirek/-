import logging
from typing import Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from bot.common import load_users_data_async
from bot.env import CHANNEL_LINK_PART
from bot.services.formatters import generate_tags

logger = logging.getLogger(__name__)


async def send_copy_to_sender(
    update, 
    context: ContextTypes.DEFAULT_TYPE, 
    message_text: str
) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –µ—ë.
    """
    # 1) –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å users_data
    if 'users_data' not in context.bot_data:
        context.bot_data['users_data'] = await load_users_data_async()
    users = context.bot_data['users_data']

    # 2) –ù–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
    sender_code = str(context.user_data.get('code', ''))
    sender = next((u for u in users if str(u.get('–∫–æ–¥')) == sender_code), None)
    if not sender:
        return

    # 3) –ü–æ–ª—É—á–∏—Ç—å metadata –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    unique_id = context.user_data.get('current_message_id')
    if not unique_id:
        return
    message_data = context.user_data.get(unique_id, {})
    channel_id = message_data.get('channel_message_id')
    thread_id  = message_data.get('thread_id')
    if not channel_id or not thread_id:
        return

    # 4) –°–æ–±—Ä–∞—Ç—å URL —Ç—Ä–µ–¥–∞
    thread_url = f"https://t.me/c/{CHANNEL_LINK_PART}/{channel_id}?thread={thread_id}"

    # 5) –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ø–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å
    try:
        sent = await context.bot.send_message(
            chat_id=int(sender['id']),
            text=(
                "üì® –ö–û–ü–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø üì®\n"
                f"{generate_tags(message_text)}\n\n"
                f"{message_text}\n\n"
                f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n{sender['–∏–º—è']} {sender['—Ñ–∞–º–∏–ª–∏—è']}"
            ),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–≤–µ—Ç—ã", url=thread_url),
                InlineKeyboardButton(
                    "–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!", 
                    callback_data=f"problem_solved_{unique_id}"
                )
            ]])
        )
        await context.bot.pin_chat_message(
            chat_id=int(sender['id']),
            message_id=sent.message_id
        )
        # –û–±–Ω–æ–≤–∏—Ç—å metadata —Å group_message_id
        context.user_data.setdefault(unique_id, {})['group_message_id'] = sent.message_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ø–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}", exc_info=True)


async def send_plain_copy_to_sender(
    update, 
    context: ContextTypes.DEFAULT_TYPE, 
    message_text: str
) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫.
    """
    # 1) –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å users_data
    if 'users_data' not in context.bot_data:
        context.bot_data['users_data'] = await load_users_data_async()
    users = context.bot_data['users_data']

    # 2) –ù–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_code = str(context.user_data.get('code', ''))
    sender = next((u for u in users if str(u.get('–∫–æ–¥')) == sender_code), None)
    if not sender:
        return

    # 3) –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ø–∏—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    try:
        await context.bot.send_message(
            chat_id=int(sender['id']),
            text=(
                "üì® –ö–û–ü–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø üì®\n"
                f"{generate_tags(message_text)}\n\n"
                f"{message_text}\n\n"
                f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n{sender['–∏–º—è']} {sender['—Ñ–∞–º–∏–ª–∏—è']}"
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ plain-–∫–æ–ø–∏–∏: {e}", exc_info=True)
