import asyncio
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from bot.common import load_users_data_async
from bot.env import CHANNEL_LINK_PART
from bot.config import PARENTS_ACTION, DIRECTOR_ACTION, STAFF_ACTION, STUDENTS_ACTION, CHOOSE_RECIPIENT
from bot.services.send_messages.channel import send_message_to_channel
from bot.services.send_messages.copy_helpers import send_copy_to_sender
from bot.services.formatters import format_message_with_signature_async

logger = logging.getLogger(__name__)


async def send_message_with_button(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    recipient_type: str,
    **kwargs
) -> int:
    # 1) –ó–∞–≥—Ä—É–∑–∫–∞ users_data (–∫–µ—à –≤ bot_data)
    if 'users_data' not in context.bot_data:
        context.bot_data['users_data'] = await load_users_data_async()
    users_data = context.bot_data['users_data']

    # 2) –°–æ–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    message_text = context.user_data.get('message_text', '')
    sender_code  = str(context.user_data.get('code', ''))
    sender = next((u for u in users_data if str(u.get('–∫–æ–¥')) == sender_code), None)

    # 3) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–æ–æ–±—â–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
    if not sender:
        err = "‚ùå –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        if update.callback_query:
            await update.callback_query.edit_message_text(err)
        else:
            await update.message.reply_text(err)
        return ConversationHandler.END

    try:
        # 4) –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª –∏ –±–µ—Ä—ë–º thread-id
        channel_data = await send_message_to_channel_async(
            context, message_text, 
            sender['–∏–º—è'], sender['—Ñ–∞–º–∏–ª–∏—è'], sender['—Å—Ç–∞—Ç—É—Å'],
            recipient_type, **kwargs
        )
        thread_url = (
            f"https://t.me/c/{CHANNEL_LINK_PART}/"
            f"{channel_data['message_id']}?thread={channel_data['thread_id']}"
        )

        # 5) –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        formatted_msg = await format_message_with_signature_async(
            message_text, sender['–∏–º—è'], sender['—Ñ–∞–º–∏–ª–∏—è'],
            sender['—Å—Ç–∞—Ç—É—Å'], recipient_type, **kwargs
        )

        # 6) –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–ª–µ—á–æ üí™", url=thread_url)]]
        )

        # 7) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        from bot.services.filters import get_receivers_async
        users_ids = await get_receivers_async(
            users_data, recipient_type, sender['id'], **kwargs
        )

        # 8) –®–ª—ë–º –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 30/—Å–µ–∫
        tasks = [
            context.bot.send_message(chat_id=uid, text=formatted_msg, reply_markup=reply_markup)
            for uid in users_ids
        ]
        for i in range(0, len(tasks), 30):
            await asyncio.gather(*tasks[i:i+30])
            if i + 30 < len(tasks):
                await asyncio.sleep(1)

        # 9) –î—É–±–ª–∏—Ä—É–µ–º —Å–µ–±–µ
        await send_copy_to_sender_async(update, context, message_text)

        # 10) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä)
        return CHOOSE_RECIPIENT

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π:", exc_info=e)
        err = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
        if update.callback_query:
            await update.callback_query.edit_message_text(err)
        else:
            await update.message.reply_text(err)
        return ConversationHandler.END
