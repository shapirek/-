import uuid
import yake
from typing import Optional

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# 1) Unique ID generator
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def generate_unique_id() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π UUID –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
    """
    return str(uuid.uuid4())


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# 2) YAKE!-based tag extractor
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def generate_tags(text: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é YAKE! –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    –µ–≥–æ –≤ –≤–∏–¥–µ #tag (–±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown).
    """
    if not text:
        return ""

    kw_extractor = yake.KeywordExtractor(
        lan="ru", n=5, dedupLim=0.5, windowsSize=15
    )
    keywords = kw_extractor.extract_keywords(text)
    if not keywords:
        return ""

    # –±–µ—Ä—ë–º —Å–∞–º–æ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ
    best_tag = sorted(keywords, key=lambda x: x[1])[0][0]
    cleaned = best_tag.replace("*", "").replace("_", "") \
                      .replace("[", "").replace("]", "")
    return "#" + cleaned.replace(" ", "_")


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# 3) Async message‚Äêwith‚Äêsignature formatter
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
async def format_message_with_signature_async(
    message_text: str,
    sender_name: str,
    sender_surname: str,
    sender_status: str,
    recipient_type: Optional[str] = None,
    **kwargs
) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —à–∞–ø–∫–æ–π, –ø—Ä–µ—Ñ–∏–∫—Å–æ–º,
    —Ç–µ–ª–æ–º, —Ç–µ–≥–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å—å—é, –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown.
    """
    # 1) Header
    if recipient_type == "equipment_request":
        header = "üì¢ –ó–ê–ü–†–û–° –¢–ï–•–ù–ò–ö–ò üì¢\n\n"
    elif sender_status == "0":
        header = "‚ùóÔ∏è –û–ë–™–Ø–í–õ–ï–ù–ò–ï ‚ùóÔ∏è\n\n"
    else:
        header = "üì® –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï üì®\n\n"

    # 2) Prefix by recipient
    if recipient_type == "director":
        prefix = "–î–æ—Ä–æ–≥–∞—è –¥–∏—Ä–µ–∫—Ü–∏—è!\n\n"
    elif recipient_type == "all_staff":
        prefix = "–õ–µ—Ç–Ω—è—è –®–∫–æ–ª–∞!\n\n"
    elif recipient_type == "tournament_judges" and kwargs.get("tournament"):
        prefix = f"–î–æ—Ä–æ–≥–∏–µ —Å—É–¥—å–∏ {kwargs['tournament']}!\n\n"
    elif kwargs.get("direction"):
        prefix = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ {kwargs['direction']}!\n\n"
    elif kwargs.get("team"):
        prefix = f"–í–æ–∂–∞—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã {kwargs['team']}!\n\n"
    else:
        prefix = ""

    # 3) Tags
    tags = generate_tags(message_text)

    # 4) Assemble
    formatted = (
        f"{header}"
        f"{prefix}"
        f"{message_text}\n\n"
        f"{tags}\n\n" if tags else f"{header}{prefix}"
    )
    formatted += (
        "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
        f"{sender_name} {sender_surname}"
    )
    return formatted
