def send_message_with_button(update: Update, context: CallbackContext, recipient_type: str, **kwargs) -> None:
    message_text = context.user_data.get('message_text')
    sender = next((u for u in users_data if str(u['–∫–æ–¥']) == context.user_data.get('code')), None)

    if not sender:
        if update.callback_query:
            update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID –∏ thread_id
    send_message_to_channel(context, message_text, sender['–∏–º—è'], sender['—Ñ–∞–º–∏–ª–∏—è'], sender['—Å—Ç–∞—Ç—É—Å'], recipient_type, **kwargs)
    message_id = context.user_data.get('channel_message_id')
    thread_id = context.user_data.get('thread_id')
    thread_url = f"https://t.me/c/{CHANNEL_LINK_PART}/{message_id}?thread={thread_id}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ —Ç–µ–≥–∞–º–∏
    formatted_message = format_message_with_signature(
        message_text, sender['–∏–º—è'], sender['—Ñ–∞–º–∏–ª–∏—è'], sender['—Å—Ç–∞—Ç—É—Å'], recipient_type, **kwargs
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–ª–µ—á–æ" —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç—Ä–µ–¥
    keyboard = [[InlineKeyboardButton("–ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–ª–µ—á–æ üí™", url=thread_url)]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, –∏—Å–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if recipient_type == 'direction':
        receivers = [user['id'] for user in users_data
                     if user.get('–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') == kwargs.get('direction') and user['id'] != sender['id']]
    elif recipient_type == 'team':
        receivers = [user['id'] for user in users_data
                     if user.get('–∫–æ–º–∞–Ω–¥–∞') == kwargs.get('team') and user['id'] != sender['id']]
    elif recipient_type == 'director':
        receivers = [user['id'] for user in users_data
                     if user.get('—Å—Ç–∞—Ç—É—Å') == '0' and user['id'] != sender['id']]
    elif recipient_type == 'all_staff':
        receivers = [user['id'] for user in users_data
                     if user.get('id') and user['id'] != sender['id']]
    elif recipient_type == 'tournament_judges':
        receivers = [
            user['id'] for user in users_data
            if user.get('—Å—É–¥—å—è') == '1' and user.get('–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') in kwargs.get('directions', [])
            and user['id'] != sender['id']
        ]
    else:
        if update.callback_query:
            update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!")
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
    for user_id in receivers:
        try:
            context.bot.send_message(chat_id=user_id, text=formatted_message, reply_markup=reply_markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    send_copy_to_sender(update, context, message_text)
