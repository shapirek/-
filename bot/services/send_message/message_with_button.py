from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import asyncio
from typing import List, Dict, Optional
from your_config import CHANNEL_LINK_PART  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
from your_utils import format_message_with_signature  # –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import logging


logger = logging.getLogger(__name__)

async def send_message_with_button(
    update: Update, 
    context: CallbackContext, 
    recipient_type: str, 
    **kwargs
) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if 'users_data' not in context.bot_data:
        context.bot_data['users_data'] = await load_users_data_async()
    
    users_data = context.bot_data['users_data']
    message_text = context.user_data.get('message_text')
    
    # –ü–æ–∏—Å–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender = next(
        (u for u in users_data 
         if str(u['–∫–æ–¥']) == context.user_data.get('code')),
        None
    )
    
    if not sender:
        error_msg = "‚ùå –û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        await (update.callback_query.edit_message_text(error_msg) if update.callback_query 
               else update.message.reply_text(error_msg))
        return

    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        channel_data = await send_message_to_channel_async(
            context, message_text, sender['–∏–º—è'], 
            sender['—Ñ–∞–º–∏–ª–∏—è'], sender['—Å—Ç–∞—Ç—É—Å'], recipient_type, **kwargs
        )
        
        if not channel_data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª")
            
        thread_url = f"https://t.me/c/{CHANNEL_LINK_PART}/{channel_data['message_id']}?thread={channel_data['thread_id']}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        formatted_msg = await format_message_with_signature_async(
            message_text, sender['–∏–º—è'], sender['—Ñ–∞–º–∏–ª–∏—è'], 
            sender['—Å—Ç–∞—Ç—É—Å'], recipient_type, **kwargs
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ø–ª–µ—á–æ üí™", url=thread_url)]
        ])
        
        # –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
        receivers = await get_receivers_async(
            users_data, recipient_type, sender['id'], **kwargs
        )
        
        # –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        send_tasks = [
            context.bot.send_message(
                chat_id=user_id,
                text=formatted_msg,
                reply_markup=reply_markup
            )
            for user_id in receivers
        ]
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫
        for i in range(0, len(send_tasks), 30):
            await asyncio.gather(*send_tasks[i:i+30])
            if i+30 < len(send_tasks):
                await asyncio.sleep(1)
                
        # –ö–æ–ø–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        await send_copy_to_sender_async(update, context, message_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
        if update.callback_query:
            await update.callback_query.edit_message_text(error_msg)
        else:
            await update.message.reply_text(error_msg)

async def get_receivers_async(
    users_data: List[Dict], 
    recipient_type: str,
    sender_id: str,
    **kwargs
) -> List[str]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
    filters = {
        'direction': lambda u: u.get('–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') == kwargs.get('direction'),
        'team': lambda u: u.get('–∫–æ–º–∞–Ω–¥–∞') == kwargs.get('team'),
        'director': lambda u: u.get('—Å—Ç–∞—Ç—É—Å') == '0',
        'all_staff': lambda u: bool(u.get('id')),
        'tournament_judges': lambda u: (
            u.get('—Å—É–¥—å—è') == '1' and 
            u.get('–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') in kwargs.get('directions', [])
    }
    
    return [
        str(user['id']) for user in users_data
        if filters.get(recipient_type, lambda _: False)(user) 
        and str(user['id']) != sender_id
    ]
