def send_copy_to_sender(update: Update, context: CallbackContext, message_text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Å—Å—ã–ª–∫–∞–º–∏ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –µ–≥–æ –≤ –¥–∏–∞–ª–æ–≥–µ.
    """
    sender = next((u for u in users_data if str(u['–∫–æ–¥']) == context.user_data.get('code')), None)
    if not sender:
        return

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    unique_id = context.user_data.get('current_message_id')
    if not unique_id:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_data = context.user_data.get(unique_id, {})
    channel_message_id = message_data.get('channel_message_id')
    thread_id = message_data.get('thread_id')
    thread_url = f"https://t.me/c/{CHANNEL_LINK_PART}/{channel_message_id}?thread={thread_id}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ —Ç–µ–≥–∞–º–∏
    formatted_message = (
        f"üì® –ö–û–ü–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø üì®\n {generate_tags(message_text)}\n\n"
        f"{message_text}\n\n"
        f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
        f"{sender['–∏–º—è']} {sender['—Ñ–∞–º–∏–ª–∏—è']}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏-—Å—Å—ã–ª–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("–û—Ç–≤–µ—Ç—ã", url=thread_url),
            InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!", callback_data=f'problem_solved_{unique_id}')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        sent_message = context.bot.send_message(
            chat_id=sender['id'],
            text=formatted_message,
            reply_markup=reply_markup
        )

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ
        context.bot.pin_chat_message(chat_id=sender['id'], message_id=sent_message.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data['group_message_id'] = sent_message.message_id
        context.user_data[unique_id] = message_data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é: {e}")

def send_plain_copy_to_sender(update: Update, context: CallbackContext, message_text: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫, —Å —Ç–µ–≥–∞–º–∏.
    """
    sender = next((u for u in users_data if str(u['–∫–æ–¥']) == context.user_data.get('code')), None)
    if not sender:
        return  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å —Ç–µ–≥–∞–º–∏
    formatted_message = (
        f"üì® –ö–û–ü–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø üì®\n {generate_tags(message_text)}\n\n"
        f"{message_text}\n\n"
        f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
        f"{sender['–∏–º—è']} {sender['—Ñ–∞–º–∏–ª–∏—è']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    try:
        context.bot.send_message(chat_id=sender['id'], text=formatted_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é: {e}")
