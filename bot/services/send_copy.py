from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import asyncio
from typing import Optional
from your_config import CHANNEL_LINK_PART  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
from your_utils import generate_tags  # –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤


async def send_copy_to_sender(update: Update, context: CallbackContext, message_text: str) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –µ–≥–æ.
    """
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if 'users_data' not in context.bot_data:
        context.bot_data['users_data'] = await load_users_data_async()
    
    sender = next((u for u in context.bot_data['users_data'] 
                 if str(u['–∫–æ–¥']) == context.user_data.get('code')), None)
    if not sender:
        return

    unique_id = context.user_data.get('current_message_id')
    if not unique_id:
        return

    message_data = context.user_data.get(unique_id, {})
    if not (channel_message_id := message_data.get('channel_message_id')) or not (thread_id := message_data.get('thread_id')):
        return

    thread_url = f"https://t.me/c/{CHANNEL_LINK_PART}/{channel_message_id}?thread={thread_id}"
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
    try:
        sent_message = await context.bot.send_message(
            chat_id=sender['id'],
            text=f"üì® –ö–û–ü–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø üì®\n{generate_tags(message_text)}\n\n{message_text}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n{sender['–∏–º—è']} {sender['—Ñ–∞–º–∏–ª–∏—è']}",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("–û—Ç–≤–µ—Ç—ã", url=thread_url),
                    InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!", callback_data=f'problem_solved_{unique_id}')
                ]
            ])
        )
        
        await context.bot.pin_chat_message(chat_id=sender['id'], message_id=sent_message.message_id)
        context.user_data.setdefault(unique_id, {}).update({'group_message_id': sent_message.message_id})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def send_plain_copy_to_sender(update: Update, context: CallbackContext, message_text: str) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ø–∏—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫.
    """
    if 'users_data' not in context.bot_data:
        context.bot_data['users_data'] = await load_users_data_async()
    
    if not (sender := next((u for u in context.bot_data['users_data'] 
                          if str(u['–∫–æ–¥']) == context.user_data.get('code')), None)):
        return

    try:
        await context.bot.send_message(
            chat_id=sender['id'],
            text=f"üì® –ö–û–ü–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø üì®\n{generate_tags(message_text)}\n\n{message_text}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n{sender['–∏–º—è']} {sender['—Ñ–∞–º–∏–ª–∏—è']}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
