from datetime import datetime, timedelta
from bot.common import get_current_date, logger


def format_schedule_message(schedule_data: dict, all_schedules: list) -> str:
    def safe_text(text: str) -> str:
        """–£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"""
        if not text:
            return ""
        return (
            str(text)
            .translate(str.maketrans('', '', '_*[]~`>#+=|{}<>'))
            .strip()
        )

    TOURNAMENTS = {
        '–§–ú–¢': 'üìê',
        '–ì–£–¢': '‚öóÔ∏è',
        '–ë–•–¢': 'üß™'
    }

    EVENING_EVENTS = {
        '–í–ö': '\n‚Ä¢ *–í–ö*\n{}',
        '–ö–∏–Ω–æ–∫–ª—É–±': '\n‚Ä¢ *–ö–∏–Ω–æ–∫–ª—É–±*\n{}',
        '–°–∞–º–æ–≤–∞—Ä': '\n‚Ä¢ *–°–∞–º–æ–≤–∞—Ä*\n{}'
    }

    # –ë–ª–æ–∫ –¥–µ–∂—É—Ä—Å—Ç–≤–∞
    current_date = get_current_date()  # –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞–ø—Ä. "10.04")

    # –î–µ–∂—É—Ä—Å—Ç–≤–æ —Å–µ–≥–æ–¥–Ω—è
    today_duty = safe_text(schedule_data.get('–î–µ–∂—É—Ä—Å—Ç–≤–æ', ''))

    # –î–µ–∂—É—Ä—Å—Ç–≤–æ –∑–∞–≤—Ç—Ä–∞ (–∏—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É)
    tomorrow_duty = ""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ datetime
        current_day = datetime.strptime(current_date, "%d.%m")
        next_day = current_day + timedelta(days=1)
        next_date = next_day.strftime("%d.%m")

        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        tomorrow_schedule = next(
            (item for item in all_schedules
             if item.get('–¥–∞—Ç–∞', '') == next_date),
            None
        )

        if tomorrow_schedule:
            tomorrow_duty = safe_text(tomorrow_schedule.get('–î–µ–∂—É—Ä—Å—Ç–≤–æ', ''))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–∞: {str(e)}")

    message = [f"üìÖ –°–µ–≥–æ–¥–Ω—è {safe_text(schedule_data.get('–¥–µ–Ω—å —à–∫–æ–ª—ã', ''))}-–π –¥–µ–Ω—å –ö–õ–®!", ""]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ü–ò–í
    piv_value = schedule_data.get('–ü–ò–í', '0')
    try:
        piv = int(piv_value)
        if piv == 1:
            message.extend([
                "üéì *–ü–ò–í-1*",
                "–°–æ—Å—Ç–æ–∏—Ç—Å—è –ø–µ—Ä–≤—ã–π –ü–ò–í!",
                "‚Ä¢ –®–∫–æ–ª—å–Ω–∏–∫–∏ –∏ —à–∫–æ–ª—å–Ω–∏—Ü—ã –≤—ã–±–∏—Ä–∞—é—Ç —Å–∫–≤–æ–∑–Ω—ã–µ –∫—É—Ä—Å—ã –∏ –∫—É—Ä—Å—ã 1 –º–æ–¥—É–ª—è",
                "‚Ä¢ –ü—Ä–∏–Ω–æ—Å–∏ –ø–ª–∞–∫–∞—Ç—ã —Å–≤–æ–∏—Ö –∫—É—Ä—Å–æ–≤",
                "‚Ä¢ –í—Ä–µ–º—è: 9:30‚Äì11:00",
                ""
            ])
        elif piv == 2:
            message.extend([
                "üéì *–ü–ò–í-2*",
                "–°–æ—Å—Ç–æ–∏—Ç—Å—è –≤—Ç–æ—Ä–æ–π –ü–ò–í!",
                "‚Ä¢ –®–∫–æ–ª—å–Ω–∏–∫–∏ –∏ —à–∫–æ–ª—å–Ω–∏—Ü—ã –≤—ã–±–∏—Ä–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å—ã 2 –º–æ–¥—É–ª—è",
                "‚Ä¢ –ü—Ä–∏–Ω–æ—Å–∏ –ø–ª–∞–∫–∞—Ç—ã —Å–≤–æ–∏—Ö –∫—É—Ä—Å–æ–≤",
                "‚Ä¢ –í—Ä–µ–º—è: 12:30‚Äì13:30",
                ""
            ])
        elif piv == 3:
            message.extend([
                "üéâ *–í–ò–ü*",
                "–°–æ—Å—Ç–æ–∏—Ç—Å—è –í–ò–ü!",
                "‚Ä¢ –®–∫–æ–ª—å–Ω–∏–∫–∏ –∏ —à–∫–æ–ª—å–Ω–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –∫—É—Ä—Å–∞—Ö",
                "‚Ä¢ –û–Ω–∏ –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–ª–∞–∫–∞—Ç—ã!",
                "‚Ä¢ –í—Ä–µ–º—è: 11:00‚Äì12:30",
                ""
            ])
    except (ValueError, TypeError):
        pass

    # –¢—É—Ä–Ω–∏—Ä—ã
    tournament_lines = []
    for key, emoji in TOURNAMENTS.items():
        value = safe_text(schedule_data.get(key, '0'))
        try:
            tournament_num = int(value)
            if tournament_num > 0:
                tournament_lines.append(f"‚Ä¢ {key}-{tournament_num}")
        except ValueError:
            if value and value != "0":
                tournament_lines.append(f"‚Ä¢ {value} {key}")

    if tournament_lines:
        message.extend([
            "üèÜ *–ü—Ä–æ–π–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã:*",
            *tournament_lines,
            ""
        ])

    # –§–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤
    facultative = schedule_data.get('–§–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤', '0')
    try:
        fac_num = int(facultative)
        if fac_num > 0:
            message.extend([
                "üìö *–§–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤*",
                f"–°–æ—Å—Ç–æ–∏—Ç—Å—è {fac_num}-–µ –∑–∞–Ω—è—Ç–∏–µ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞!",
                ""
            ])
    except (ValueError, TypeError):
        pass

    # –í–µ—á–µ—Ä–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    evening_events = []
    for key, template in EVENING_EVENTS.items():
        value = safe_text(schedule_data.get(key, ''))
        if value:
            evening_events.append(template.format(value))

    if evening_events:
        message.extend([
            "üïó *–í–µ—á–µ—Ä–æ–º:*",
            *evening_events,
            ""
        ])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ
    if today_duty or tomorrow_duty:
        duty_message = []
        if today_duty:
            duty_message.append(f"–°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä—è—Ç: {today_duty}")
        if tomorrow_duty:
            duty_message.append(f"–ö –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–µ–∂—É—Ä—Å—Ç–≤—É –≥–æ—Ç–æ–≤—è—Ç—Å—è: {tomorrow_duty}")

        message.extend([
            "\nü´° *–î–µ–∂—É—Ä—Å—Ç–≤–æ*",
            *duty_message,
            ""
        ])

    # –û–±—ä—è–≤–ª–µ–Ω–∏—è
    announcements = safe_text(schedule_data.get('–û–±—ä—è–≤–ª–µ–Ω–∏—è', ''))
    if announcements:
        message.extend([
            "‚ùóÔ∏è *–û–±—ä—è–≤–ª–µ–Ω–∏—è* ‚ùóÔ∏è",
            announcements,
            ""
        ])

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
    if message and message[-1] == "":
        message.pop()

    return "\n".join(message).strip()
